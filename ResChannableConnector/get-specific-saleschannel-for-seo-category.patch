Index: vendor/store.shopware.com/reschannableconnector/src/Core/Api/Controller/ResChannableApiController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Core/Api/Controller/ResChannableApiController.php b/src/Core/Api/Controller/ResChannableApiController.php
--- a/src/Core/Api/Controller/ResChannableApiController.php
+++ b/src/Core/Api/Controller/ResChannableApiController.php	(date 1691158378501)
@@ -272,6 +272,14 @@
         /** @var SalesChannelEntity|null $salesChannel */
         $salesChannel = $this->salesChannelRepository->search($criteria, $context)->get($salesChannelId);
 
+        if ( !$salesChannel ){
+            $criteria = new Criteria();
+            $criteria->addAssociation('domains');
+            $criteria->addFilter(new EqualsFilter('domains.url', $this->shopBaseUrl));
+            $salesChannel = $this->salesChannelRepository->search($criteria, $context)->first();
+            $salesChannelId = $salesChannel->getId();
+        }
+
         if ( !$salesChannel )
             return ['error' => 'Invalid sales channel','success' => 'false'];
 
@@ -602,7 +610,7 @@
         $article = [];
         $article = $this->parseGeneral($article, $product, $parent, $salesChannelContext, $translation, $parentTranslation, $languageId, $salesChannelDomain);
         $article = $this->parseImages($article, $product);
-        $article = $this->parseCategories($article, $product, $parent, $languageId);
+        $article = $this->parseCategories($article, $product, $parent, $languageId, $salesChannelContext);
         $article = $this->parseOptions($article, $product, $languageId);
         $article = $this->parseProperties($article, $product, $languageId);
         $article = $this->parseCustomFields($article, $product, $parent, $translation, $parentTranslation, $salesChannelContext);
@@ -1063,7 +1071,7 @@
      * @param string $languageId
      * @return array
      */
-    private function parseCategories(array $article, ProductEntity $product, ?ProductEntity $parent, string $languageId): array
+    private function parseCategories(array $article, ProductEntity $product, ?ProductEntity $parent, string $languageId, SalesChannelContext $context): array
     {
         $categories = $product->getCategories();
 
@@ -1076,7 +1084,7 @@
             if ( method_exists($product,'getStreams') ) {
                 $streams = $product->getStreams();
 
+                $product->getMainCategories()?->filterBySalesChannelId($context->getSalesChannelId())->first();
+
 
                 if ($streams instanceof ProductStreamCollection) {
                     $streams = $streams->getElements();